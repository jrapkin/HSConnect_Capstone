@model ServiceOfferedViewModel
@{
    ViewData["Title"] = "ViewResources";
    Layout = "~/Views/Shared/_Layout_SocialWorker.cshtml";
}

<h1>DisplayServices</h1>

<body>
    <div id="map" style="width: 500px; height: 400px;"></div>
    <script type="text/javascript">
        function initMap() {

            var map = new google.maps.Map(document.getElementById('map'), {
                zoom: 10,
                center: new google.maps.LatLng(43.0343, -87.9115)
            });

            var contantInformation = @Html.Raw(Json.Serialize(Model.ServicesOffered.Select(c => new string[]{c.Provider.ProviderName, c.Provider.PhoneNumber, c.Provider.Email}).ToArray()));

            var infowindow = new google.maps.InfoWindow();

            var coordinatesArray = @Html.Raw(Json.Serialize(Model.ServicesOffered.Select(a => new double[]{a.Address.Lat, a.Address.Lng}).ToArray()));

            for (var i = 0; i < coordinatesArray.length; i++) {

                var marker = new google.maps.Marker({
                    position: new google.maps.LatLng(coordinatesArray[i][0], coordinatesArray[i][1]),
                    map: map
                });

                google.maps.event.addListener(marker, 'click', (function (marker, i) {
                    return function () {
                        infowindow.setContent(contantInformation[i][0] + '<br>' + contantInformation[i][1] + '<br>' + contantInformation[i][2]);
                        infowindow.open(map, marker);
                    }
                })(marker, i));
            }
        }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=@API_Keys.GeocodeAndGoogleMapsKey&callback=initMap"></script>

<button onclick='openFilterResourcesMenu()'>Filter Resources</button>
<a asp-action="Resources">Reset Filter</a>
<div id="filter" style="display:none;">
    <form asp-action="FilteredResources">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="form-group">
            <label asp-for="ProviderId" class="control-label"></label>
            <select asp-for="ProviderId" asp-items='new SelectList(@Model.Providers, "Id", "ProviderName")' class="form-control"></select>
            <span asp-validation-for="ProviderId" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="CategoryId" class="control-label"></label>
            <select asp-for="CategoryId" asp-items='new SelectList(@Model.Categories, "Id", "Name")' class="form-control"></select>
            <span asp-validation-for="CategoryId" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="ServiceId" class="control-label"></label>
            <select asp-for="ServiceId" asp-items='new SelectList(@Model.Services, "Id", "Name")' class="form-control"></select>
            <span asp-validation-for="ServiceId" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="GenderSelection" class="control-label"></label>
            <select asp-for="GenderSelection" asp-items='new SelectList(@Model.GenderOptions, "Key", "Value")' class="form-control"></select>
            <span asp-validation-for="GenderSelection" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="FamilySelection" class="control-label"></label>
            <select asp-for="FamilySelection" asp-items='new SelectList(@Model.FamilyFriendlyOptions, "Key", "Value")' class="form-control"></select>
            <span asp-validation-for="FamilySelection" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="SmokingSelection" class="control-label"></label>
            <select asp-for="SmokingSelection" asp-items='new SelectList(@Model.SmokingOptions, "Key", "Value")' class="form-control"></select>
            <span asp-validation-for="SmokingSelection" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="MinCost" class="control-label"></label>
            <input asp-for="MinCost" class="form-control" />
            <span asp-validation-for="MinCost" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="MaxCost" class="control-label"></label>
            <input asp-for="MaxCost" class="form-control" />
            <span asp-validation-for="MaxCost" class="text-danger"></span>
        </div>
        <div class="form-group">
            <input type="submit" value="Filter" class="btn btn-primary" />
        </div>
    </form>
</div>
<table class="table">
    <thead>
        <tr>
            <th>
            </th>
            <th>
                Provider Name
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Provider.PhoneNumber)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Cost)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Address)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Category)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Demographic)
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.ServicesOffered)
        {
            <tr>
                <td>
                    @Html.ActionLink("Create Referral", "CreateReferral", new { serviceOfferedId=item.Id }) |
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Provider.ProviderName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Provider.PhoneNumber)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Cost)
                </td>
                @if (item.Address != null)
                {
                    <td>
                        @Html.DisplayFor(modelItem => item.Address.StreetAddress), @Html.DisplayFor(modelItem => item.Address.City),
                        @Html.DisplayFor(modelItem => item.Address.State), @Html.DisplayFor(modelItem => item.Address.ZipCode)
                    </td>
                }
                @if (item.Category != null)
                {
                    <td>
                        @Html.DisplayFor(modelItem => item.Category.Name)
                    </td>
                }
                @if (item.Demographic != null)
                {
                    switch (item.Demographic.IsMale)
                    {
                        case null:
                            <td>
                                Co-Ed Facility
                            </td>
                            break;
                        case false:
                            <td>
                                Female Only Facility
                            </td>
                            break;
                        case true:
                            <td>
                                Male Only Facility
                            </td>
                            break;
                    }
                    switch (item.Demographic.IsAgeSensitive)
                    {
                        case null:
                            <td>
                                Not Applicable
                            </td>
                            break;
                        case false:
                            <td>
                                18 and Older
                            </td>
                            break;
                        case true:
                            <td>
                                Seniors Only
                            </td>
                            break;
                    }
                    switch (item.Demographic.FamilyFriendly)
                    {
                        case null:
                            <td>
                                Not Applicable
                            </td>
                            break;
                        case false:
                            <td>
                                Individual
                            </td>
                            break;
                        case true:
                            <td>
                                Family Friendly
                            </td>
                            break;
                    }
                    switch (item.Demographic.SmokingIsAllowed)
                    {
                        case null:
                            <td>
                                Not Applicable
                            </td>
                            break;
                        case false:
                            <td>
                                Non-Smoking Facility
                            </td>
                            break;
                        case true:
                            <td>
                                Smoking Allowed
                            </td>
                            break;
                    }
                 }
            </tr>
        }
    </tbody>
</table>
</body>


